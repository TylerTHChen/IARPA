
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.13.0.56.2

// ldbanno -n Verilog -o GDS_QMOD_4_GDS_QMOD_vo.vo -w -neg -gui GDS_QMOD_4_GDS_QMOD.ncd 
// Netlist created on Fri Jul 05 17:16:18 2024
// Netlist written on Fri Jul 05 17:16:32 2024
// Design is for device LCMXO3LF-6900C
// Design is for package CABGA256
// Design is for performance grade 5

`timescale 1 ns / 1 ps

module waves ( clk, GDS, QMOD );
  input  clk;
  output GDS, QMOD;
  wire   \bit_cnt[0] , bit_cnt_1_cry_0, \bit_cnt[11] , \bit_cnt_1[11] , GDS7_i, 
         clk_c, bit_cnt_1_cry_10, \bit_cnt[10] , \bit_cnt[9] , \bit_cnt_1[10] , 
         \bit_cnt_1[9] , bit_cnt_1_cry_8, \bit_cnt[8] , \bit_cnt[7] , 
         \bit_cnt_1[8] , \bit_cnt_1[7] , bit_cnt_1_cry_6, \bit_cnt[6] , 
         \bit_cnt[5] , \bit_cnt_1[6] , \bit_cnt_1[5] , bit_cnt_1_cry_4, 
         \bit_cnt[4] , \bit_cnt[3] , \bit_cnt_1[4] , \bit_cnt_1[3] , 
         bit_cnt_1_cry_2, \bit_cnt[2] , \bit_cnt[1] , \bit_cnt_1[2] , 
         \bit_cnt_1[1] , GDS7lt10, \bit_cnt_i[0] , GDS7, N_5_1, QMOD_2_0_0, 
         QMOD_2, GDS7lt8, GDS_c, QMOD_c, VCCI;

  SLICE_0 SLICE_0( .B1(\bit_cnt[0] ), .FCO(bit_cnt_1_cry_0));
  SLICE_1 SLICE_1( .A0(\bit_cnt[11] ), .DI0(\bit_cnt_1[11] ), .LSR(GDS7_i), 
    .CLK(clk_c), .FCI(bit_cnt_1_cry_10), .F0(\bit_cnt_1[11] ), 
    .Q0(\bit_cnt[11] ));
  SLICE_2 SLICE_2( .A1(\bit_cnt[10] ), .A0(\bit_cnt[9] ), 
    .DI1(\bit_cnt_1[10] ), .DI0(\bit_cnt_1[9] ), .LSR(GDS7_i), .CLK(clk_c), 
    .FCI(bit_cnt_1_cry_8), .F0(\bit_cnt_1[9] ), .Q0(\bit_cnt[9] ), 
    .F1(\bit_cnt_1[10] ), .Q1(\bit_cnt[10] ), .FCO(bit_cnt_1_cry_10));
  SLICE_3 SLICE_3( .A1(\bit_cnt[8] ), .A0(\bit_cnt[7] ), .DI1(\bit_cnt_1[8] ), 
    .DI0(\bit_cnt_1[7] ), .LSR(GDS7_i), .CLK(clk_c), .FCI(bit_cnt_1_cry_6), 
    .F0(\bit_cnt_1[7] ), .Q0(\bit_cnt[7] ), .F1(\bit_cnt_1[8] ), 
    .Q1(\bit_cnt[8] ), .FCO(bit_cnt_1_cry_8));
  SLICE_4 SLICE_4( .A1(\bit_cnt[6] ), .A0(\bit_cnt[5] ), .DI1(\bit_cnt_1[6] ), 
    .DI0(\bit_cnt_1[5] ), .LSR(GDS7_i), .CLK(clk_c), .FCI(bit_cnt_1_cry_4), 
    .F0(\bit_cnt_1[5] ), .Q0(\bit_cnt[5] ), .F1(\bit_cnt_1[6] ), 
    .Q1(\bit_cnt[6] ), .FCO(bit_cnt_1_cry_6));
  SLICE_5 SLICE_5( .A1(\bit_cnt[4] ), .A0(\bit_cnt[3] ), .DI1(\bit_cnt_1[4] ), 
    .DI0(\bit_cnt_1[3] ), .LSR(GDS7_i), .CLK(clk_c), .FCI(bit_cnt_1_cry_2), 
    .F0(\bit_cnt_1[3] ), .Q0(\bit_cnt[3] ), .F1(\bit_cnt_1[4] ), 
    .Q1(\bit_cnt[4] ), .FCO(bit_cnt_1_cry_4));
  SLICE_6 SLICE_6( .A1(\bit_cnt[2] ), .A0(\bit_cnt[1] ), .DI1(\bit_cnt_1[2] ), 
    .DI0(\bit_cnt_1[1] ), .LSR(GDS7_i), .CLK(clk_c), .FCI(bit_cnt_1_cry_0), 
    .F0(\bit_cnt_1[1] ), .Q0(\bit_cnt[1] ), .F1(\bit_cnt_1[2] ), 
    .Q1(\bit_cnt[2] ), .FCO(bit_cnt_1_cry_2));
  SLICE_7 SLICE_7( .D1(GDS7lt10), .C1(\bit_cnt[10] ), .B1(\bit_cnt[9] ), 
    .A1(\bit_cnt[11] ), .A0(\bit_cnt[0] ), .DI0(\bit_cnt_i[0] ), .LSR(GDS7_i), 
    .CLK(clk_c), .F0(\bit_cnt_i[0] ), .Q0(\bit_cnt[0] ), .F1(GDS7));
  SLICE_8 SLICE_8( .D1(\bit_cnt[5] ), .C1(N_5_1), .B1(\bit_cnt[11] ), 
    .A1(\bit_cnt[8] ), .D0(\bit_cnt[8] ), .C0(QMOD_2_0_0), .B0(\bit_cnt[6] ), 
    .A0(\bit_cnt[7] ), .F0(QMOD_2), .F1(QMOD_2_0_0));
  SLICE_9 SLICE_9( .D1(GDS7lt8), .C1(\bit_cnt[8] ), .B1(\bit_cnt[6] ), 
    .A1(\bit_cnt[7] ), .D0(\bit_cnt[9] ), .C0(GDS7lt10), .B0(\bit_cnt[10] ), 
    .A0(\bit_cnt[11] ), .F0(GDS7_i), .F1(GDS7lt10));
  SLICE_10 SLICE_10( .D1(\bit_cnt[4] ), .A1(\bit_cnt[3] ), .D0(\bit_cnt[5] ), 
    .C0(N_5_1), .B0(\bit_cnt[1] ), .A0(\bit_cnt[2] ), .F0(GDS7lt8), .F1(N_5_1));
  GDS GDS_I( .PADDO(GDS_c), .GDS(GDS));
  clk clk_I( .PADDI(clk_c), .clk(clk));
  QMOD QMOD_I( .IOLDO(QMOD_c), .QMOD(QMOD));
  QMOD_MGIOL QMOD_MGIOL( .IOLDO(QMOD_c), .OPOS(QMOD_2), .CE(GDS7), .CLK(clk_c));
  GDS_2_0_0 GDS_2_0_0( .ADA12(\bit_cnt[11] ), .ADA11(\bit_cnt[10] ), 
    .ADA10(\bit_cnt[9] ), .ADA9(\bit_cnt[8] ), .ADA8(\bit_cnt[7] ), 
    .ADA7(\bit_cnt[6] ), .ADA6(\bit_cnt[5] ), .ADA5(\bit_cnt[4] ), 
    .ADA4(\bit_cnt[3] ), .ADA3(\bit_cnt[2] ), .ADA2(\bit_cnt[1] ), 
    .ADA1(\bit_cnt[0] ), .DOA0(GDS_c), .CEA(GDS7), .OCEA(GDS7), .CLKA(clk_c));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
  GSR GSR_INST( .GSR(VCCI));
endmodule

module SLICE_0 ( input B1, output FCO );
  wire   GNDI;

  ccu2 bit_cnt_1_cry_0_0( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h000A;
  defparam inst1.INIT1 = 16'h500C;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module SLICE_1 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \bit_cnt[11] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20001 bit_cnt_1_s_11_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(), 
    .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_2 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \bit_cnt[10] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \bit_cnt[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20001 bit_cnt_1_cry_9_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_3 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \bit_cnt[8] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \bit_cnt[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20001 bit_cnt_1_cry_7_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_4 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \bit_cnt[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \bit_cnt[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20001 bit_cnt_1_cry_5_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_5 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \bit_cnt[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \bit_cnt[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20001 bit_cnt_1_cry_3_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_6 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \bit_cnt[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \bit_cnt[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20001 bit_cnt_1_cry_1_0( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_7 ( input D1, C1, B1, A1, A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut4 GDS7lto11( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40002 \bit_cnt_i[0] ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \bit_cnt[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5755) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40002 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_8 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40003 QMOD_2_0_0( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40004 QMOD_2_0( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40003 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3373) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40004 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0F7) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_9 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40005 GDS7lto8( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40006 GDS7lto8_RNI9NSJ1( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40005 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF7F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40006 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA8A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_10 ( input D1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40007 GDS7lto5_2( .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40008 GDS7lto5( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40007 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0055) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40008 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module GDS ( input PADDO, output GDS );
  wire   GNDI;

  xo2iobuf GDS_pad( .I(PADDO), .T(GNDI), .PAD(GDS));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => GDS) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module clk ( output PADDI, input clk );

  xo2iobuf0009 clk_pad( .Z(PADDI), .PAD(clk));

  specify
    (clk => PADDI) = (0:0:0,0:0:0);
    $width (posedge clk, 0:0:0);
    $width (negedge clk, 0:0:0);
  endspecify

endmodule

module xo2iobuf0009 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module QMOD ( input IOLDO, output QMOD );
  wire   GNDI;

  xo2iobuf QMOD_pad( .I(IOLDO), .T(GNDI), .PAD(QMOD));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => QMOD) = (0:0:0,0:0:0);
  endspecify

endmodule

module QMOD_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre QMOD_0io( .D0(OPOS_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre ( input D0, SP, CK, LSR, output Q );

  FD1P3DX INST01( .D(D0), .SP(SP), .CK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module GDS_2_0_0 ( input ADA12, ADA11, ADA10, ADA9, ADA8, ADA7, ADA6, ADA5, 
    ADA4, ADA3, ADA2, ADA1, output DOA0, input CEA, OCEA, CLKA );
  wire   GNDI, ADA12_dly, CLKA_dly, ADA11_dly, ADA10_dly, ADA9_dly, ADA8_dly, 
         ADA7_dly, ADA6_dly, ADA5_dly, ADA4_dly, ADA3_dly, ADA2_dly, ADA1_dly, 
         CEA_dly, OCEA_dly;

  SP8KC_B GDS_2_0_0_SP8KC( .CE(CEA_dly), .OCE(OCEA_dly), .CLK(CLKA_dly), 
    .WE(GNDI), .CS0(GNDI), .CS1(GNDI), .CS2(GNDI), .RST(GNDI), .DI0(GNDI), 
    .DI1(GNDI), .DI2(GNDI), .DI3(GNDI), .DI4(GNDI), .DI5(GNDI), .DI6(GNDI), 
    .DI7(GNDI), .DI8(GNDI), .AD0(GNDI), .AD1(ADA1_dly), .AD2(ADA2_dly), 
    .AD3(ADA3_dly), .AD4(ADA4_dly), .AD5(ADA5_dly), .AD6(ADA6_dly), 
    .AD7(ADA7_dly), .AD8(ADA8_dly), .AD9(ADA9_dly), .AD10(ADA10_dly), 
    .AD11(ADA11_dly), .AD12(ADA12_dly), .DO0(DOA0), .DO1(), .DO2(), .DO3(), 
    .DO4(), .DO5(), .DO6(), .DO7(), .DO8());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLKA => DOA0) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, ADA12, 0:0:0, 0:0:0,,,, CLKA_dly, ADA12_dly);
    $setuphold (posedge CLKA, ADA11, 0:0:0, 0:0:0,,,, CLKA_dly, ADA11_dly);
    $setuphold (posedge CLKA, ADA10, 0:0:0, 0:0:0,,,, CLKA_dly, ADA10_dly);
    $setuphold (posedge CLKA, ADA9, 0:0:0, 0:0:0,,,, CLKA_dly, ADA9_dly);
    $setuphold (posedge CLKA, ADA8, 0:0:0, 0:0:0,,,, CLKA_dly, ADA8_dly);
    $setuphold (posedge CLKA, ADA7, 0:0:0, 0:0:0,,,, CLKA_dly, ADA7_dly);
    $setuphold (posedge CLKA, ADA6, 0:0:0, 0:0:0,,,, CLKA_dly, ADA6_dly);
    $setuphold (posedge CLKA, ADA5, 0:0:0, 0:0:0,,,, CLKA_dly, ADA5_dly);
    $setuphold (posedge CLKA, ADA4, 0:0:0, 0:0:0,,,, CLKA_dly, ADA4_dly);
    $setuphold (posedge CLKA, ADA3, 0:0:0, 0:0:0,,,, CLKA_dly, ADA3_dly);
    $setuphold (posedge CLKA, ADA2, 0:0:0, 0:0:0,,,, CLKA_dly, ADA2_dly);
    $setuphold (posedge CLKA, ADA1, 0:0:0, 0:0:0,,,, CLKA_dly, ADA1_dly);
    $setuphold (posedge CLKA, CEA, 0:0:0, 0:0:0,,,, CLKA_dly, CEA_dly);
    $setuphold (posedge CLKA, OCEA, 0:0:0, 0:0:0,,,, CLKA_dly, OCEA_dly);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
  endspecify

endmodule

module SP8KC_B ( input CE, OCE, CLK, WE, CS0, CS1, CS2, RST, DI0, DI1, DI2, 
    DI3, DI4, DI5, DI6, DI7, DI8, AD0, AD1, AD2, AD3, AD4, AD5, AD6, AD7, AD8, 
    AD9, AD10, AD11, AD12, output DO0, DO1, DO2, DO3, DO4, DO5, DO6, DO7, DO8 );

  SP8KC INST10( .DO0(DO0), .DO1(DO1), .DO2(DO2), .DO3(DO3), .DO4(DO4), 
    .DO5(DO5), .DO6(DO6), .DO7(DO7), .DO8(DO8), .DI0(DI0), .DI1(DI1), 
    .DI2(DI2), .DI3(DI3), .DI4(DI4), .DI5(DI5), .DI6(DI6), .DI7(DI7), 
    .DI8(DI8), .AD0(AD0), .AD1(AD1), .AD2(AD2), .AD3(AD3), .AD4(AD4), 
    .AD5(AD5), .AD6(AD6), .AD7(AD7), .AD8(AD8), .AD9(AD9), .AD10(AD10), 
    .AD11(AD11), .AD12(AD12), .WE(WE), .RST(RST), .CS0(CS0), .CS1(CS1), 
    .CS2(CS2), .CLK(CLK), .CE(CE), .OCE(OCE));
  defparam INST10.ASYNC_RESET_RELEASE = "SYNC";
  defparam INST10.CSDECODE = "0b000";
  defparam INST10.DATA_WIDTH = 2;
  defparam INST10.GSR = "DISABLED";

    defparam INST10.INITVAL_00 = "0x000050AA550A000000050AA550A800000010AA550A800000010AA550A800000010AA550A80000000";

    defparam INST10.INITVAL_01 = "0x08000000150AA5508000000150AA5508000000150AA5508000000050AA550A000000050AA550A000";

    defparam INST10.INITVAL_02 = "0x0AA5400000000550AA5500000000550AA5500000000550AA5500000000550AA5500000000150AA55";

    defparam INST10.INITVAL_03 = "0x000050AA5000000000050AA5000000000050AA5400000000050AA5400000000010AA540000000001";

    defparam INST10.INITVAL_04 = "0x00000000050AA4000000000550AA4000000000150AA4000000000150AA4000000000150AA5000000";

    defparam INST10.INITVAL_05 = "0x0AA0000000000150AA0000000000150AA0000000000150AA4000000000050AA4000000000050AA40";

    defparam INST10.INITVAL_06 = "0x000150A80000000000150A80000000000550A80000000000550A80000000000550A8000000000055";

    defparam INST10.INITVAL_07 = "0x00000002550A00000000002550A00000000000550A00000000000550A80000000000550A80000000";

    defparam INST10.INITVAL_08 = "0x000000000000A55000000000000A55080000000000A5508000000000025508000000000025508000";

    defparam INST10.INITVAL_09 = "0x0AA5400000000000AA54000000000002A54000000000002A55000000000002A55000000000000A55";

    defparam INST10.INITVAL_0A = "0x000010AA4000000000010AA5000000000010AA5000000000000AA5000000000000AA500000000000";

    defparam INST10.INITVAL_0B = "0x00000000150AA0000000000050AA0000000000050AA4000000000050AA4000000000010AA4000000";

    defparam INST10.INITVAL_0C = "0x0A00000000000550A80000000000550A80000000000150A80000000000150A80000000000150AA00";

    defparam INST10.INITVAL_0D = "0x00A550800000000002550800000000002550A00000000002550A00000000000550A0000000000055";

    defparam INST10.INITVAL_0E = "0x0000002A55000000000002A55000000000000A55000000000000A55000000000000A550800000000";

    defparam INST10.INITVAL_0F = "0x00000000000AA5000000000000AA5400000000000AA54000000000002A54000000000002A5400000";

    defparam INST10.INITVAL_10 = "0x0AA4000000000050AA4000000000010AA4000000000010AA5000000000010AA5000000000010AA50";

    defparam INST10.INITVAL_11 = "0x000000000000000000000000000000000000AA0000000000050AA0000000000050AA000000000005";

    defparam INST10.INITVAL_12 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_13 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_14 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_15 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_16 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_17 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_18 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_19 = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_1A = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_1B = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_1C = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_1D = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_1E = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";

    defparam INST10.INITVAL_1F = "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000";
  defparam INST10.INIT_DATA = "STATIC";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "SYNC";
  defparam INST10.WRITEMODE = "NORMAL";
endmodule
